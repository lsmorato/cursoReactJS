//array map:	Cria um clone de um array, transformando-os em um novo array com as alterações pretendidas.


const array = [1,2,3,4,5,6];

const novoArray = array.map(elemento) =>{
	return elemento*elemento;
}

console.log(novoArray);

//>> Resultado: 1,4,9,18,25,36


//forEach: Percorre cada elemento do Array

let soma = 0;
array.forEach((el) => soma = soma + el);
console.log(soma); //>> 21


const produtos = [
	{id: 1, nome: "monitor", preco: 150},
	{id: 2, nome: "mouse", preco: 10},
	{id: 3, nome: "teclado", preco: 7},
	{id: 3, nome: "teclado diferente", preco: 40},
]

//find: Retorna o PRIMEIRO objeto de acordo com o parâmetro infomado (ou undefined)
let idProduto = 3;
const prod = produtos.find((el) => el.id == idProduto)
console.log(prod); //{id: 3, nome: "teclado"}

//filter: Retorna todos os objetos que satisfaçam a condição desejada (ou array vazio)
const prodFiltrados = produtos.filter((el) => el.preco <= 10)
console.log(prodFiltrados); //{id: 2, nome: "mouse", preco: 10} {id: 3, nome: "teclado", preco: 7}

//some: é o mesmo que any o mesmo que existis

const carrinho = [1,2];
let existe = produtos.some((el) => el === );
console.log(existe) //true

//=== (compara tipo e valor)
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Equality_comparisons_and_sameness

//Desestruturação: Espalha um objeto como propriedades dentro de outro

const obj {
	nome: "lici",
	estado: "df"
}

const novoObj{
	idade 18,
	...obj
	//obj.nome
	//obj.estado
}




